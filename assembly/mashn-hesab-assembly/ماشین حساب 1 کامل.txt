name "CALCULATOR"
org 100h
jmp start    
include 'emu8086.inc'  
DEFINE_SCAN_NUM
 DEFINE_PRINT_STRING
; DEFINE_PTHIS
 DEFINE_GET_STRING
 DEFINE_CLEAR_SCREEN
 DEFINE_PRINT_NUM
 DEFINE_PRINT_NUM_UNS 
 
 
;PRINT AN STRING IN SCREAN
PRINTSTR MACRO STR
push ax
push dx
MOV AH,09H
LEA DX,STR
INT 21H
pop dx
pop ax
ENDM 

;print hex number (fund in net)

PrtHex     proc near uses ax bx cx

           mov  bx,offset Hex
           mov  cx,04h
HexLoop:   push  ax
           mov  al,ah
           shr  al,04h
           xlatb
           mov  dl,al
           mov  ah,02
           int  21h
           pop  ax
           shl  ax,04h
           loop HexLoop

           ret
PrtHex     endp

;data

msg1 db 'number(1): $'
msg2 db  0dh,0ah ,"operator(+ - * /): $"
msg3 db  0dh,0ah ,"number(2): $"
msg4 db  0dh,0ah , 'result  : $' 
msg5 db  'large number to hex :$'
exitmsg db  0dh,0ah ,'e or E for exit or press any key to continue... ', 0Dh,0Ah, '$'
div_sing db  " / $"
err db  0dh,0ah ,"please enter an operator(+ - * /) or e or E for exit :", 0Dh,0Ah , '$'       
BREAK DB 10, 13,'$';PRINT NEW LINE
Hex        db  '0123456789ABCDEF'
; operator can be: '+','-','*','/' or 'q' to exit in the middle.
opr db '?'

; first and second number:
num1 dw ?
num2 dw ?
temp dw ?

start:  
call CLEAR_SCREEN
PRINTSTR MSG1
    ; output string at ds:dx



; get the multi-digit signed number
; from the keyboard, and store
; the result in cx register:

call scan_num

; store first number:
mov num1, cx 



; new line:
printstr break



printstr msg2 

operator:
; get operator:
mov ah, 1   ; single char input to AL.
int 21h
mov opr, al



; new line:
printstr break


cmp opr, 'e'      ; q - exit in the middle.
je exit
cmp opr, 'E'      ; q - exit in the middle.
je exit
cmp opr, 2ah  ;if 2a!=* ... 2f!=/ jmp wrong_opr
jb fail
cmp opr, 2fh
ja fail






; output of a string at ds:dx
printstr msg3  


; get the multi-digit signed number
; from the keyboard, and store
; the result in cx register:

call scan_num


; store second number:
mov num2, cx 




printstr msg4


; calculate:



 ; compare 

cmp opr, '+'
je sum1

cmp opr, '-'
je sub1

cmp opr, '*'
je mul1

cmp opr, '/'
je div1
; none of the above....
fail:

printstr err   ; output string at ds:dx
jmp operator
;----------------------------------------
sum1:


mov ax, num1                                                                                                
add ax, num2
call print_num    ; print ax value.

jmp ex


;----------------------------------------
sub1:

mov ax, num1
sub ax, num2
call print_num    ; print ax value.

jmp ex


;------------------------------------------

mul1:
mov dx,0
mov ax, num1
imul num2 ; (dx ax) = ax * num2.
cmp dx , 0
je mul2 
; for larg number
printstr msg5
mov temp , ax
mov ax , dx
call PrtHex ;print dx value
mov ax , temp
call PrtHex ;print ax value 
 mov  ah,02
 mov  dl,'h'
 int  21h
jmp ex

mul2: 
call print_num    ; print ax value.
; dx is ignored (calc works with tiny numbers only).

jmp ex


;-----------------------------------------------------------

div1:
; dx is ignored (calc works with tiny integer numbers only).
mov dx, 0
mov ax, num1
idiv num2  ; ax = (dx ax) / num2.
cmp dx, 0
jnz float
call print_num    ; print ax value.
jmp ex

float:   
mov ax, num1
call print_num    ; print ax value.

printstr div_sing   ; output string at ds:dx
mov ax, num2
call print_num    ; print ax value.


ex: 

printstr exitmsg 
mov ah, 1   ; single char input to AL.
int 21h

cmp al, 'e'      ; q - exit in the middle.
je exit
cmp al, 'E'      ; q - exit in the middle.
je exit
jmp start

exit:

ret  ; return back to os.

