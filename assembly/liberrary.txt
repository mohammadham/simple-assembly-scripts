.MODEL SMALL
; ===============================
; Assembly Utility Library / کتابخانه ابزار اسمبلی
; مجموعه‌ای از ماکروها و توابع پرکاربرد برای پروژه‌های اسمبلی
; Each section is documented in English and Farsi for clarity and reusability.
; ===============================
 OUTDEC PROC
   ; this procedure will display a decimal number
   ; input : AX
   ; output : none

   PUSH BX                        ; push BX onto the STACK
   PUSH CX                        ; push CX onto the STACK
   PUSH DX                        ; push DX onto the STACK

   CMP AX, 0                      ; compare AX with 0
   JGE @START                     ; jump to label @START if AX>=0

   PUSH AX                        ; push AX onto the STACK

   MOV AH, 2                      ; set output function
   MOV DL, "-"                    ; set DL='-'
   INT 21H                        ; print the character

   POP AX                         ; pop a value from STACK into AX

   NEG AX                         ; take 2's complement of AX

   @START:                        ; jump label

   XOR CX, CX                     ; clear CX
   MOV BX, 10                     ; set BX=10

   @OUTPUT:                       ; loop label
     XOR DX, DX                   ; clear DX
     DIV BX                       ; divide AX by BX
     PUSH DX                      ; push DX onto the STACK
     INC CX                       ; increment CX
     OR AX, AX                    ; take OR of Ax with AX
   JNE @OUTPUT                    ; jump to label @OUTPUT if ZF=0

   MOV AH, 2                      ; set output function

   @DISPLAY:                      ; loop label
     POP DX                       ; pop a value from STACK to DX
     OR DL, 30H                   ; convert decimal to ascii code
     INT 21H                      ; print a character
   LOOP @DISPLAY                  ; jump to label @DISPLAY if CX!=0

   POP DX                         ; pop a value from STACK into DX
   POP CX                         ; pop a value from STACK into CX
   POP BX                         ; pop a value from STACK into BX

   RET                         ; return control to the calling procedure
OUTDEC ENDP      

; ------------------------------
; INPUTNUM PROC: Read a signed 4-digit number from user input and store in AX
; دریافت عدد صحیح ۴ رقمی از کاربر و ذخیره در AX
; Usage: Call this procedure to prompt and read a number
; ------------------------------
INPUTNUM PROC NEAR  	;GIVE 4 DIGIT NUMBER STORE IN AX

MOV AH,09H
LEA DX,mass2
INT 21H

MOV AH,1
INT 21H  
cmp al , 0dh
jNe CONTINUE
MOV AX , 00
jmp convert

CONTINUE:
cmp al , 2dh
je manfi

;----------------mosbat

SUB AL,30H
MOV AH,0

ne:
MOV BL,10
MOV BH , 00
MUL BX

MOV Bx,Ax

MOV AH,1
INT 21H
cmp al , 0DH  ;-------newl
je en
cmp al , 0AH  ;-------newl
je en
cmp al , ' ' ;-------space
je en
SUB AL,30H
MOV AH,0
ADD Ax,Bx
jmp ne



en:
MOV AX,BX
MOV BX,10  

DIV BX

jmp convert



;------------------ manfi
manfi:  

MOV AH,1
INT 21H
SUB AL,30H
MOV AH,0
ne2:
MOV BL,10
MOV BH , 00
MUL BX

MOV Bx,Ax

MOV AH,1
INT 21H
cmp al , 0DH  ;-------newl
je en2
cmp al , 0AH  ;-------newl
je en2
cmp al , ' ' ;-------space
je en2
SUB AL,30H
MOV AH,0
ADD Ax,Bx
jmp ne2



en2:
MOV AL,BL
MOV BL,10  
MOV AH,0
DIV BL

not ax
inc ax

convert: 
;MOV AH,0


 
RET 
INPUTNUM ENDP


;//////////////////////////////////////////////// 
; ------------------------------
; PRINTSTR MACRO: Print a string to the screen
; چاپ رشته روی صفحه نمایش
; Usage: PRINTSTR <address>
; ------------------------------
PRINTSTR MACRO STR
push ax
push dx
MOV AH,09H
LEA DX,STR
INT 21H
pop dx
pop ax
ENDM   

;//////////////////////////////////////////////////
; ------------------------------
; GETSTR1 MACRO: Get a string from user input
; دریافت رشته از کاربر
; Usage: GETSTR1 <buffer>
; ------------------------------
GETSTR1 MACRO STR
push si
push dx
push ax
LEA SI , STR
MOV DX , SI
MOV AH, 0AH
INT 21H
pop ax
pop dx
pop si
ENDM 
;////////////////////////////////////////////////////
; ------------------------------
; OUTDEC MACRO: Print signed decimal number in AX (macro version)
; چاپ عدد اعشاری علامت‌دار (نسخه ماکرو)
; Usage: OUTDEC
; ------------------------------
OUTDEC MACRO
   ; this procedure will display a decimal number
   ; input : AX
   ; output : none

   PUSH BX                        ; push BX onto the STACK
   PUSH CX                        ; push CX onto the STACK
   PUSH DX                        ; push DX onto the STACK

   CMP AX, 0                      ; compare AX with 0
   JGE @START                     ; jump to label @START if AX>=0

   PUSH AX                        ; push AX onto the STACK

   MOV AH, 2                      ; set output function
   MOV DL, "-"                    ; set DL='-'
   INT 21H                        ; print the character

   POP AX                         ; pop a value from STACK into AX

   NEG AX                         ; take 2's complement of AX

   @START:                        ; jump label

   XOR CX, CX                     ; clear CX
   MOV BX, 10                     ; set BX=10

   @OUTPUT:                       ; loop label
     XOR DX, DX                   ; clear DX
     DIV BX                       ; divide AX by BX
     PUSH DX                      ; push DX onto the STACK
     INC CX                       ; increment CX
     OR AX, AX                    ; take OR of Ax with AX
   JNE @OUTPUT                    ; jump to label @OUTPUT if ZF=0

   MOV AH, 2                      ; set output function

   @DISPLAY:                      ; loop label
     POP DX                       ; pop a value from STACK to DX
     OR DL, 30H                   ; convert decimal to ascii code
     INT 21H                      ; print a character
   LOOP @DISPLAY                  ; jump to label @DISPLAY if CX!=0

   POP DX                         ; pop a value from STACK into DX
   POP CX                         ; pop a value from STACK into CX
   POP BX                         ; pop a value from STACK into BX

                            ; return control to the calling procedure
ENDM
;//////////////////////////////////////////////
; ------------------------------
; GETNUM MACRO: Get a positive number (0-99) from user input and store in STR
; دریافت عدد مثبت (۰ تا ۹۹) و ذخیره در STR
; Usage: GETNUM <destination>
; ------------------------------
GETNUM MACRO STR ;GET POSTIVE NUM 0-99
PUSHA     
    mov ax,00   ;RETURN NUMBER IN AX
    ll1:
    GETSTR1 NUMBER
	mov si , 02   
	mov ax,00 
	cmp NUMBER[si],0DH
	jE  @ERROR
	cmp NUMBER[si],'-'
	jNE mosbat
	@ERROR:
	PRINTSTR mass
	
	mov ax , 00
	jmp ll1
	
	mosbat:
	mov bx, 00
	mov bl , NUMBER[si]
	CMP BL , 57
	JG EX1
	CMP BL , 48
	JL EX1
	sub bl , 30h
	add ax, bx
	inc si   
	cmp NUMBER[si], 57
	jg ex1
	cmp NUMBER[si], 48
	jl ex1 
	mov bx , 10
	mul bx
	jmp mosbat 
ex1:                                
  MOV STR , AX   
 POPA                     
ENDM 

;///////////////////////////////////////////////////////
; ------------------------------
; INPUTNUM MACRO: Get a signed 4-digit number from user input and store in AX (or STR)
; دریافت عدد صحیح ۴ رقمی و ذخیره در AX یا STR
; Usage: INPUTNUM <destination>
; ------------------------------
INPUTNUM MACRO STR	;GIVE 4 DIGIT NUMBER STORE IN AX
PUSHA
PRINTSTR MASS2

MOV AH,1
INT 21H  
cmp al , 0dh
jNe CONTINUE
MOV AX , 00
jmp convert

CONTINUE:
cmp al , 2dh
je manfi

;----------------mosbat

SUB AL,30H
MOV AH,0

ne:
MOV BL,10
MOV BH , 00
MUL BX

MOV Bx,Ax

MOV AH,1
INT 21H
cmp al , 0DH  ;-------newl
je en
cmp al , 0AH  ;-------newl
je en
cmp al , ' ' ;-------space
je en
SUB AL,30H
MOV AH,0
ADD Ax,Bx
jmp ne



en:
MOV AL,BL
MOV BL,10  
MOV AH,0
DIV BL

jmp convert



;------------------ manfi
manfi:  

MOV AH,1
INT 21H
SUB AL,30H
MOV AH,0
ne2:
MOV BL,10
MOV BH , 00
MUL BX

MOV Bx,Ax

MOV AH,1
INT 21H
cmp al , 0DH  ;-------newl
je en2
cmp al , 0AH  ;-------newl
je en2
cmp al , ' ' ;-------space
je en2
SUB AL,30H
MOV AH,0
ADD Ax,Bx
jmp ne2



en2:
MOV AL,BL
MOV BL,10  
MOV AH,0
DIV BL

not ax
inc ax

convert: 
;MOV AH,0
MOV STR , AX

POPA 

ENDM
;///////////////////////////////////////////
; ------------------------------
; PRINTSTR1 MACRO: Print a string from user input (skipping length bytes)
; چاپ رشته وارد شده توسط کاربر (بدون بایت‌های طول)
; Usage: PRINTSTR1 <buffer>
; ------------------------------
PRINTSTR1 MACRO STR ; STRING FROM USER

LEA si , STR
ADD si , 2
MOV DX , si 
MOV AH , 09H
INT 21H
ENDM
;//////////////////////////////////////////////
; ------------------------------
; PRINT_MATRIX MACRO: Print a 2D array (matrix) of size MxN
; چاپ ماتریس با ابعاد MxN
; Usage: PRINT_MATRIX <array>, <rows>, <cols>
; ------------------------------
PRINT_MATRIX MACRO STR , M, N
   ; this procedure will print the elements of a given array
   ; input : SI=offset address of the array ==>STR
   ;       : M= COL && N=ROW
   ; output : none

   PUSHA

   MOV SI , OFFSET STR	
   MOV CX, M                     ; set CX=AX

   @PRINT_ARRAY:                  ; loop label
        MOV BX , N
	@LABEL1:
     MOV AX, [SI]                 ; set AX=AX+[SI]

        OUTDEC                  ; call the procedure OUTDEC

     MOV AH, 2                    ; set output function
     MOV DL, 20H                  ; set DL=20H
     INT 21H                      ; print a character
     
     ADD SI, 2                    ; set SI=SI+2
     DEC BX
     CMP BX , 0000
     JNE @LABEL1
   LOOP @PRINT_ARRAY              ; jump to label @PRINT_ARRAY while CX!=0

POPA
                              ; return control to the calling procedure
ENDM

;//////////////////////////////////////////////
; ------------------------------
; PRINT_ARRAY MACRO: Print a 1D array of size STR2
; چاپ آرایه یک‌بعدی با اندازه STR2
; Usage: PRINT_ARRAY <array>, <size>
; ------------------------------
PRINT_ARRAY MACRO STR , STR2
   ; this procedure will print the elements of a given array
   ; input : SI=offset address of the array ==>STR
   ;       : BX=size of the array ==> STR2
   ; output : none

   PUSHA
   MOV BX, STR2
   MOV SI , OFFSET STR	
   MOV CX, BX                     ; set CX=BX

   @PRINT_ARRAY:                  ; loop label
     MOV AX, [SI]                 ; set AX=AX+[SI]

        OUTDEC                  ; call the procedure OUTDEC

     MOV AH, 2                    ; set output function
     MOV DL, 20H                  ; set DL=20H
     INT 21H                      ; print a character

     ADD SI, 2                    ; set SI=SI+2
   LOOP @PRINT_ARRAY              ; jump to label @PRINT_ARRAY while CX!=0

POPA
                              ; return control to the calling procedure
ENDM
;/////////////////////////////////////////////////////
; ------------------------------
; SORT_ARRAY MACRO: Sort an array in ascending order
; مرتب‌سازی آرایه به صورت صعودی
; Usage: SORT_ARRAY <array>, <size>
; ------------------------------
SORT_ARRAY MACRO STR,STR2
   ; this procedure will sort the array in ascending order
   ; input : SI=offset address of the array==>STR
   ;       : BX=array size==>STR2
   ; output : none

   PUSHA
   MOV T ,00 
   MOV DX, 00
   MOV SI , OFFSET STR
   MOV AX, SI                     ; set AX=SI
   MOV CX, STR2                     ; set CX=BX
   DEC CX                         ; set CX=CX-1

   @OUTER_LOOP:                   ; loop label
     MOV BX, STR2
     DEC BL                 ; set BX=CX

     MOV SI, AX                   ; set SI=AX
     MOV DI, AX                   ; set DI=AX
     ADD DI ,2                      ; set DI=DI+2
     MOV DX, 00
     @INNER_LOOP:                 ; loop label 
       MOV DX, [SI]               ; set DL=[SI]

       CMP DX, [DI]               ; compare DL with [DI]
       JNG @SKIP_EXCHANGE         ; jump to label @SKIP_EXCHANGE if DL<[DI]

       
       ;XCHG DL, [DI]              ; set DL=[DI], [DI]=DL
       MOV T,DX
       MOV DX,[DI]
       MOV [SI], DX
       MOV DX,T 
       MOV [DI],DX
       
       ;MOV [SI], DX               ; set [SI]=DL

       @SKIP_EXCHANGE:            ; jump label
      ADD SI ,2                    ; set SI=SI+2
      ADD DI ,2                    ; set DI=DI+2

       DEC BX                     ; set BX=BX-1
     JNZ @INNER_LOOP              ; jump to label @INNER_LOOP if BX!=0
   LOOP @OUTER_LOOP               ; jump to label @OUTER_LOOP while CX!=0

POPA
ENDM
;//////////////////////////////////////////////////////////////////////////////
; ------------------------------
; READ_ARRAY MACRO: Read elements into an array from user input
; دریافت عناصر آرایه از کاربر
; Usage: READ_ARRAY <array>, <size>
; ------------------------------
READ_ARRAY MACRO STR,STR2
   ; this procedure will read the elements for an array
   ; input : SI=offset address of the array==>STR
   ;       : BX=size of the array==>STR2
   ; output : none

PUSHA
   MOV SI , OFFSET STR
   MOV CX, STR2                     ; set CX=BX

   @READ_ARRAY:                   ; loop label
    INPUTNUM T                  ; call the procedure INDEC
     MOV AX , T
     MOV [SI], AX                ; set [SI]=AX
     ADD SI, 2                    ; set SI=SI+2
   PRINTSTR BREAK
   ;  MOV DL, 0AH                  ; line feed
   ;  MOV AH, 2                    ; set output function
    ; INT 21H                      ; print a character
   LOOP @READ_ARRAY               ; jump to label @READ_ARRAY while CX!=0

POPA
ENDM
;////////////////////////////////////////////////////

;ADD TO HEADER 
#start=led_display.exe# 
#make_bin#
;------------
; ------------------------------
; READ_LED_NUM MACRO: Output a number to a hardware port (e.g., LED display)
; ارسال عدد به پورت سخت‌افزاری (مثلاً نمایشگر LED)
; Usage: READ_LED_NUM <number>
; ------------------------------
READ_LED_NUM MACRO STR

   ; input : STR IS A NUMBER
   ; output : none

PUSHA
mov ax ,STR
out 199, ax 
POPA
ENDM
;////////////////////////////////////////////////////
; ------------------------------
; DELLAY MACRO: Delay execution for STR seconds (approximate)
; ایجاد تاخیر به مدت STR ثانیه (تقریبی)
; Usage: DELLAY <seconds>
; ------------------------------
DELLAY MACRO STR

   ; input : STR IS A NUMBER FOR DELLAY SEC
   ; output : none

PUSHA
XOR BX , BX
MOV BX ,STR
label10000: 
  mov     cx, 0fh    
  mov     dx, 4240h
  mov     ah, 86h
  int     15h  
DEC BX
CMP BX ,0000
JNE label10000
POPA
ENDM
;////////////////////////////////////////////////////



 .STACK 100H

 .DATA 
    ;DONT DELETE
    ;----------------------------------------------------------------------------
    mass db 13,10,"Enter a unsinged number !! ",0DH,0AH,'ENTER NEW NUMBER POSTIVED 0-99 :$'
    MASS2 DB "Enter a singed number (-9999 : 9999) :$" 
    BREAK DB 10, 13,'$' 
    T    DW 00
    NUMBER db 6 dup('$') 
    ;ARRAY   DW  60 DUP(0)                      
    ;-----------------------------------------------------------------------------
    ;YOUR DATA
    ;==========================================================================

  


    ;==========================================================================

 .CODE
   MAIN PROC
     MOV AX, @DATA                ; initialize DS
     MOV DS, AX
;=====================================================================
;your code

;======================================================================
END MAIN
end